{"version":3,"sources":["audio/Buddy-In.mp3","audio/Buddy-Out.mp3","audio/Drop.mp3","audio/File-Done.mp3","audio/Goodbye.mp3","audio/im.mp3","audio/Got-Pics.mp3","audio/Welcome.mp3","audio/You-Got-Mail.mp3","aolpic.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","sounds","trigger","id","file","welcome","gotmail","filedone","im","buddyin","buddyout","drop","gotpics","goodbye","Audio","react_default","a","createElement","className","this","props","src","Component","SoundButtons","padKeys","map","padKey","key","onClick","App_Audio","bind","soundText","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","sound_requested","sound_text","soundPress","assertThisInitialized","processEvent","handleClick","event","target","soundEntry","filter","sound","toUpperCase","length","entry","setState","document","getElementById","play","addEventListener","removeEventListener","aolpic","alt","App_SoundButtons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24592c2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Buddy-In.b21dbca7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Buddy-Out.06f2cbe4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Drop.6d9462e6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/File-Done.4f040a90.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Goodbye.f4200c5f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/im.f96c0996.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Got-Pics.63e8a01a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Welcome.f8a11654.mp3\";","module.exports = __webpack_public_path__ + \"static/media/You-Got-Mail.5dc90c91.mp3\";","module.exports = __webpack_public_path__ + \"static/media/aolpic.0b0a5c32.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport buddyin from './audio/Buddy-In.mp3';\nimport buddyout from './audio/Buddy-Out.mp3';\nimport drop from './audio/Drop.mp3';\nimport filedone from './audio/File-Done.mp3';\nimport goodbye from './audio/Goodbye.mp3';\nimport im from './audio/im.mp3';\nimport gotpics from './audio/Got-Pics.mp3';\nimport welcome from './audio/Welcome.mp3';\nimport gotmail from './audio/You-Got-Mail.mp3';\nimport aolpic from './aolpic.svg';\n\n  const sounds =\n  [{trigger: 'Q', id: 'welcome', file: welcome},\n  {trigger: 'W', id: 'gotmail', file: gotmail},\n  {trigger: 'E', id: 'filedone', file: filedone},\n  {trigger: 'A', id: 'im', file: im},\n  {trigger: 'S', id: 'buddyin', file: buddyin},\n  {trigger: 'D', id: 'buddyout', file: buddyout},\n  {trigger: 'Z', id: 'drop', file: drop},\n  {trigger: 'X', id: 'gotpics', file: gotpics},\n  {trigger: 'C', id: 'goodbye', file: goodbye}]\n\n  class Audio extends Component {\n    render(){\n      return(\n      <audio \n        className=\"clip\" \n        id={this.props.id} \n        src={this.props.src}>\n      </audio>)\n    }\n  }\n\n  class SoundButtons extends Component {\n\n    render(){\n      const padKeys = sounds.map(function(padKey){\n        return (\n          <button \n            className=\"drum-pad\" \n            id={padKey.id} \n            key={padKey.trigger + padKey.id}\n            onClick={this.props.onClick}>\n\n              {padKey.trigger} \n\n              <Audio \n                id={padKey.trigger} \n                src={padKey.file} />\n          </button>\n        )\n      }.bind(this))\n  \n      return(\n        <div id=\"display\">\n          <div id=\"button-cont\">\n            {padKeys}\n          </div>\n\n          <div id=\"text-board\">\n            {this.props.soundText}\n          </div>\n        </div>\n      );\n    }\n  }\n  \nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sound_requested: null,\n      sound_text: \"SOUND BOARD\"\n    }\n\n    this.soundPress = this.soundPress.bind(this);\n    this.processEvent = this.processEvent.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    if(event.target.className === \"drum-pad\"){\n      const soundEntry = sounds.filter((sound) => sound.id === event.target.id)[0];\n      this.processEvent(soundEntry);\n    }\n  }\n\n  soundPress(event){\n    if(event.target.className === \"drum-pad\"){\n      let soundEntry = sounds.filter(sound => sound.trigger === event.key.toUpperCase())\n      if(soundEntry.length){ \n        this.processEvent(soundEntry[0])\n      }\n    }  \n  }\n\n  processEvent(entry) {\n    this.setState({\n      sound_requested: entry,\n      sound_text: entry.id.toUpperCase()\n    });\n\n    const audioElement = document.getElementById(entry.trigger)    \n    audioElement.play();\n  }\n\n  componentDidMount() {\n    document.getElementById('display').addEventListener('keydown', this.soundPress);\n  }\n\n  componentWillUnMmount() {\n    document.getElementById('display').removeEventListener('keydown', this.soundPress);\n  }\n\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <div id=\"logo-container\">\n          <img src={aolpic} alt=\"AOL-logo\" />\n        </div>\n\n        <SoundButtons onClick={this.handleClick} soundText={this.state.sound_text}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}